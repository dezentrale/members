/*
 * Dezentrale Members Administration
 * An API and application to administer the members of the hackspace dezentrale in Leipzig.
 *
 * The version of the OpenAPI document: 0.1.0-SNAPSHOT
 * Contact: p1ng0ut@mailbox.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package space.dezentrale.members.controller;

import io.micronaut.http.HttpStatus;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Consumes;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Produces;
import io.micronaut.http.exceptions.HttpStatusException;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import reactor.core.publisher.Mono;
import space.dezentrale.members.model.Error;
import space.dezentrale.members.model.Member;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;


@Generated(value = "org.openapitools.codegen.languages.JavaMicronautServerCodegen", date = "2022-11-16T15:52:35.373+01:00[Europe/Berlin]")
@Controller
@Tag(name = "Create", description = "The Create API")
public class CreateController {
    /**
     * An endpoint to create a new member after it has been approved by the association&#39;s board.
     *
     * @param member (required)
     * @return Member
     */
    @Operation(
        operationId = "membersPost",
        tags = { "create", "member" },
        responses = {
            @ApiResponse(responseCode = "201", description = "created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Member.class))
            }),
            @ApiResponse(responseCode = "400", description = "bad-request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        parameters = {
            @Parameter(name = "member", required = true)
        },
        security = {
            @SecurityRequirement(name = "member_administration_auth", scopes = {"read_members", "write_members"})
        }
    )
    @Post(uri="/members")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Member> membersPost(
        @Body @NotNull @Valid Member member
    ) {
        // TODO implement membersPost();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
